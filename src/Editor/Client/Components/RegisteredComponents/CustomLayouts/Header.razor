@inherits BaseComponent
@using Medulla.Editor.Client.Library.Utilities.Unique


<div
    @ondragenter="MouseOver"
    @ondragleave="MouseLeave"
    @onclick="Clicked" class="Header @GetMargin() @GetPadding()" style="position: relative;">
    
    @if (!Editor.PreviewMode)
    {
        @if (Editor.CurrentComponent != null && Editor.CurrentComponent.UniqueId != null && Editor.CurrentComponent.UniqueId.Equals(this.UniqueId))
        {
            <svg @onclick="Unselect" style="height: 20px;
                        cursor: pointer;
                        background: green;
                        border-radius: 50px;
                        position: absolute;
                        top: 0px;
                        right: 49px;
                        color: lightgray;
                    }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        }
        else
        {
            <svg @onclick="() => this.UpdatePropertiesWindow(Editor, this.UniqueId)" style="height: 20px;
                        cursor: pointer;
                        background: gray;
                        border-radius: 50px;
                        position: absolute;
                        top: 0px;
                        right: 49px;
                        color: lightgray;
                    }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        }
    }
    
    <div class="Header-item">
        <a href="#" class="Header-link f4 d-flex flex-items-center">
            <!-- <%= octicon "mark-github", class: "mr-2", height: 32 %> -->
            <svg height="32" class="octicon octicon-mark-github mr-2" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path></svg>
            <span>@Brand</span>
        </a>
    </div>
    <div class="Header-item">
        <input type="search" class="form-control Header-input"/>
    </div>
    <div class="Header-item Header-item--full">
        Menu
    </div>
    <div class="Header-item mr-0">
        <img class="avatar" height="20" src="@ImgLink" width="20">
    </div>
</div>

@code {

    [Parameter]
    public string Brand { get; set; } = "{Brand not set}";

    [Parameter]
    public string ImgLink { get; set; } = "https://github.com/octocat.png";
    
    protected override void AfterAddComponent(EditorPage editor, UniqueId uniqueId)
    {

        return;
    }

    protected override Properties GetProperties()
    {
        Properties properties = new();
        properties.PropertyList.Add(new() 
        { 
            Name = "Brand", 
            InputDescription = "Brand", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "Placeholder", "Brand"
                },
                { "PropertyName", "Brand" }
            }, InputType = "Medulla.Editor.Client.Components.PropertiesWindow.PropertyComponents.TextInput" }
            );
        // properties.PropertyList.Add(new() { Name = "Brand", InputDescription = "Branch", DefaultValue = "", InputType = "input" });
        // properties.PropertyList.Add(new() { Name = "ImgLink", InputDescription = "ImgLink", DefaultValue = "", InputType = "input" });
        return properties;
    }

    protected override bool IsClickable()
    {
        return false;
    }
    
    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }
    
    protected override bool IsHoverComponentContainer()
    {
        return false;
    }

}