@using Medulla.Editor.Client.Library.Utilities.Unique
@inherits BaseComponent

<ComponentContainer>

@if (!Editor.PreviewMode)
{
    @if (Editor.CurrentComponent != null && Editor.CurrentComponent.UniqueId != null && Editor.CurrentComponent.UniqueId.Equals(this.UniqueId))
    {
        <svg @onclick="Unselect" style="    height: 20px;
                                            cursor: pointer;
                                            background: green;
                                            border-radius: 50px;
                                            position: absolute;
                                            top: 1.5px;
                                            left: 23px;
                                            color: lightgray;
                                            z-index: 1000;" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
    }
    else
    {
        <svg @onclick="() => this.UpdatePropertiesWindow(Editor, this.UniqueId)" style="    height: 20px;
                                                                                            cursor: pointer;
                                                                                            background: gray;
                                                                                            border-radius: 50px;
                                                                                            position: absolute;
                                                                                            top: 1.5px;
                                                                                            left: 23px;
                                                                                            color: lightgray;
                                                                                            z-index: 1000;" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
    }
}

<div class="d-flex flex-justify-center pt-4">
  <span class="tooltipped tooltipped-nw m-2 p-2 border" aria-label="This is the tooltip on the North West side.">
    .tooltipped-nw
  </span>
  <span class="tooltipped tooltipped-n m-2 p-2 border" aria-label="This is the tooltip on the North side.">
    .tooltipped-n
  </span>
  <span class="tooltipped tooltipped-ne m-2 p-2 border" aria-label="This is the tooltip on the North East side.">
    .tooltipped-ne
  </span>
</div>
<div class="d-flex flex-justify-center">
  <span class="tooltipped tooltipped-w m-2 p-2 border" aria-label="This is the tooltip on the West side.">
    .tooltipped-w
  </span>
  <span class="tooltipped tooltipped-e m-2 p-2 border" aria-label="This is the tooltip on the East side.">
    .tooltipped-e
  </span>
</div>
<div class="d-flex flex-justify-center pb-4">
  <span class="tooltipped tooltipped-sw m-2 p-2 border" aria-label="This is the tooltip on the South West side.">
    .tooltipped-sw
  </span>
  <span class="tooltipped tooltipped-s m-2 p-2 border" aria-label="This is the tooltip on the South side.">
    .tooltipped-s
  </span>
  <span class="tooltipped tooltipped-se m-2 p-2 border" aria-label="This is the tooltip on the South East side.">
    .tooltipped-se
  </span>
</div>

</ComponentContainer>

@code {



    protected override Properties GetProperties()
    {
        Properties properties = new();
        return properties;
    }

    protected override bool IsClickable()
    {
        return false;
    }

    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return true;
    }

    protected override bool IsHoverComponentContainer()
    {
        return false;
    }

    protected override void AfterAddComponent(EditorPage editor, UniqueId uniqueId)
    {

    }

}


<style>

</style>

