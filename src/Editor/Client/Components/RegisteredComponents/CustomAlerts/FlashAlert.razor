@inherits BaseComponent
@using Medulla.Editor.Client.Library.Utilities.Unique

<div
    @ondragenter="MouseOver"
    @ondragleave="MouseLeave"
    class="flash-messages @GetMargin() @GetPadding()" @onclick="Clicked" style="position: relative;">

       @if (!Editor.PreviewMode)
                   {
                       @if (Editor.CurrentComponent != null && Editor.CurrentComponent.UniqueId != null && Editor.CurrentComponent.UniqueId.Equals(this.UniqueId))
                       {
                           <svg @onclick="Unselect" style="height: 20px;
                                       cursor: pointer;
                                       background: green;
                                       border-radius: 50px;
                                       position: absolute;
                                       top: 0px;
                                       z-index: 100000;
                                       right: 49px;
                                       color: lightgray;
                                   }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                           </svg>
                       }
                       else
                       {
                           <svg @onclick="() => this.UpdatePropertiesWindow(Editor, this.UniqueId)" style="height: 20px;
                                       cursor: pointer;
                                       background: gray;
                                       border-radius: 50px;
                                       position: absolute;
                                       z-index: 100000;
                                       top: 0px;
                                       right: 49px;
                                       color: lightgray;
                                   }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                           </svg>
                       }
                   }


    <div class="flash  @GetErrorType()">
        @Content
    </div>
</div>

@code {
    
    [Parameter]
    public string Content { get; set; } = "{No content}";

    [Parameter]
    public string ErrorType { get; set; } = "";


    protected override void AfterAddComponent(EditorPage editor, UniqueId uniqueId)
    {

        return;
    }
    
    private string GetErrorType()
    {
        if (ErrorType == "error")
            return "flash-error";
        else if (ErrorType == "success")
            return "flash-success";
        else if (ErrorType == "warn")
            return "flash-warn";

        return "";
    }
    
    protected override Properties GetProperties()
    {
        Properties properties = new ();
        properties.PropertyList.Add(new() 
        { 
            Name = "Content", 
            InputDescription = "Content", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "Placeholder", "Content"
                },
                { "PropertyName", "Content" }
            }, InputType = "Medulla.Editor.Client.Components.PropertiesWindow.PropertyComponents.TextInput" }
            );
        properties.PropertyList.Add(new() 
        { 
            Name = "ErrorType", 
            InputDescription = "ErrorType", 
            DefaultValue = new Dictionary<string, object>()
            {
                {
                    "DropdownItems", new Dictionary<string, string>() {
                        { "Default", "" },
                        { "Success", "success" },
                        { "Error", "error" },
                        { "Warning", "warn" },
                    }
                },
                {
                    "Title", "Alert Type"
                },
                { "PropertyName", "ErrorType" }
            }, InputType = "Medulla.Editor.Client.Components.PropertiesWindow.PropertyComponents.Dropdown" }
            );
        // properties.PropertyList.Add(new Property() { Name = "ErrorType", DefaultValue = "ErrorType", InputDescription = "Alert Type", InputType = "input"});
        return properties;
    }

    protected override bool IsClickable()
    {
        return false;
    }

    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }
    
    protected override bool IsHoverComponentContainer()
    {
        return false;
    }
}
