@inherits BaseComponent


<div
    style="position: relative;"
    @ondragenter="MouseOver"
    @ondragleave="MouseLeave"
    @onclick="Clicked" class="Box @GetMargin() @GetPadding()">
    @if (!Editor.PreviewMode)
    {
        @if (Editor.CurrentComponent != null && Editor.CurrentComponent.UniqueId != null && Editor.CurrentComponent.UniqueId.Equals(this.UniqueId))
        {
            <svg @onclick="Unselect" style="height: 20px;
                        cursor: pointer;
                        background: green;
                        border-radius: 50px;
                        position: absolute;
                        top: 0px;
                        right: 49px;
                        color: lightgray;
                    }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        }
        else
        {
            <svg @onclick="() => this.UpdatePropertiesWindow(Editor, this.UniqueId)" style="height: 20px;
                        cursor: pointer;
                        background: gray;
                        border-radius: 50px;
                        position: absolute;
                        top: 0px;
                        right: 49px;
                        color: lightgray;
                    }" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        }
    }
    <div class="Box-header">
        <h3 class="Box-title">
            @Title
        </h3>
    </div>
    <div class="d-flex " style="min-height: 400px">
        @for (var i = 0; i < GetNumberOfColumns(); i++)
        {
            <div class="Box-body Box">
                Box body
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public string Title { get; set; } = "{Title not set}";

    [Parameter]
    public string NumberOfColumns { get; set; } = "3";

    protected override void AfterAddComponent(EditorPage editor, Medulla.Editor.Client.Library.Utilities.Unique.UniqueId uniqueId)
    {

        return;
    }

    private int GetNumberOfColumns()
    {
        int number = 3;
        try
        {
            number = Int32.Parse(NumberOfColumns);
        }
        catch (FormatException)
        {
            number = 3;
        }
        return number;
    }
    
    protected override Properties GetProperties()
    {
        Properties properties = new();
        // properties.PropertyList.Add(new() { Name = "Title", InputDescription = "Title", DefaultValue = "", InputType = "input" });
        // properties.PropertyList.Add(new() { Name = "NumberOfColumns", InputDescription = "NumberOfColumns", DefaultValue = "", InputType = "input" });
        return properties;
    }

    protected override bool IsClickable()
    {
        return false;
    }
    
    protected override bool DoesImplementPadding()
    {
        return true;
    }

    protected override bool DoesImplementMargin()
    {
        return true;
    }

    protected override bool DoesImplementFonts()
    {
        return false;
    }
    
    protected override bool IsHoverComponentContainer()
    {
        return false;
    }

}